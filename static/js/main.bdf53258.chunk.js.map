{"version":3,"sources":["clientinfo.js","actions/userActions.js","actions/types.js","colors.js","components/UserInfo.js","reducers/userInfoReducer.js","reducers/subscriberInfoReducer.js","reducers/index.js","store.js","actions/subscriberActions.js","components/SubscriberChart.js","components/App.js","serviceWorker.js","index.js","logo.png"],"names":["CLIENT_ID","REDIRECT_URI","fetchUserData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","userData","wrap","_context","prev","next","axios","get","headers","Authorization","concat","queryString","parse","document","location","hash","access_token","sent","type","payload","data","t0","console","log","userId","displayName","profileImage","stop","_x","apply","this","arguments","COLORS","RED","DARK_BLUE","BLUE","LIGHT_BLUE","LAVENDER","GREY","Image","styled","img","withConfig","componentId","Div","div","Name","h2","LoginButton","button","connect","state","user","_Component","UserInfo","_getPrototypeOf2","_this","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","mapDispatchToProps","componentWillMount","props","handleClick","e","window","open","inherits","createClass","key","value","_this2","undefined","info","id","react_default","createElement","src","profile_image_url","logo","className","alt","display_name","onClick","Component","initialState","users","combineReducers","objectSpread","subscribers","push","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","fetchSubscribers","userID","getState","setInterval","Chart","SubscriberChart","labels","datasets","fontColor","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","scales","yAxes","stacked","gridLines","color","ticks","xAxes","legend","display","title","text","componentWillReceiveProps","nextProps","slice","map","x","Date","toUTCString","substring","react_chartjs_2_es","ref","chart","AppContainer","App","componentDidMount","es","components_UserInfo","components_SubscriberChart","Boolean","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bdf53258.chunk.js","sourcesContent":["export const CLIENT_ID='lk9hyx24834i7j25guphvmkwvgp86s'\nexport const REDIRECT_URI='https://streamstats.seve.dev'","//\n// ─── USER ACTION ────────────────────────────────────────────────────────────────\n//\n\n\nimport axios from 'axios';\nimport queryString from 'query-string'\n\nimport { FETCH_USER } from './types';\n\n\nexport const fetchUserData = () => async dispatch => {\n  try {\n    let userData = await axios.get('https://api.twitch.tv/helix/users', {\n      // SENDING CLIENT ID TOKEN TO CHECK FOR AUTHENTICATION\n      // HEADER AUTHORISATION WILL BE REQUIRED FOR ALL GET REQUESTS\n      headers: {\n        Authorization: `Bearer ${queryString.parse(document.location.hash).access_token}`\n      }\n    })\n\n    if (userData){\n      dispatch({\n        type: FETCH_USER,\n        payload: userData.data.data[0]\n      })\n    }\n  } catch(error){\n    console.log(error);\n    dispatch({\n      type: FETCH_USER,\n      payload: {userId: 123,\n        displayName: 'test',\n        profileImage: ''}\n    })\n  }\n}\n\n","export const LOGIN = 'LOGIN'\nexport const FETCH_USER = 'FETCH_USER'\nexport const FETCH_SUBSCRIBERS = 'FETCH_SUBSCRIBER'","/* Coolors Exported Palette - coolors.co/de6b48-5eb1bf-e5b181-e0a890-f4b9b2 */\n\nexport const  COLORS = {\n  RED: '#995C4C',\n  DARK_BLUE: '#36667C',\n  BLUE:  '#659188',\n  LIGHT_BLUE: '#4C87A2',\n  LAVENDER: '#9B919C',\n  GREY: '#9A9897'\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components/macro'\n\n\nimport logo from '../logo.png'\nimport {CLIENT_ID, REDIRECT_URI} from '../clientinfo'\nimport { fetchUserData } from '../actions/userActions'\nimport { COLORS } from '../colors'\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user\n  }\n}\n\n  const Image = styled.img`\n    border-radius: 50%;\n    height: 200px;\n    width: 200px;\n    margin-top: 24px;\n  `\n  const Div = styled.div`\n    display: flex;\n    flex-direction: column;\n    background-color: ${COLORS.BLUE};\n    width: 300px;\n    align-items: center;\n    justify-items: center;\n    border-radius: 8px;\n    -webkit-box-shadow: 0px 9px 23px 1px rgba(0,0,0,0.75);\n    -moz-box-shadow: 0px 9px 23px 1px rgba(0,0,0,0.75);\n    box-shadow: 0px 9px 23px 1px rgba(0,0,0,0.75);\n  `\n\n  const Name = styled.h2`\n  margin: 16px 0px;\n  `\n\n  const LoginButton = styled.button`\n  margin: 16px;\n  text-decoration: none;\n  color: #495264;\n  background: #dddddd;\n  border-radius: 12px;\n  width: 45%;\n  padding: 4px;\n  transition: 700ms;\n  :hover {\n    background: #ffffff;\n    -webkit-box-shadow: 0px 9px 15px 1px rgba(0,0,0,0.75);\n    -moz-box-shadow: 0px 9px 15px 1px rgba(0,0,0,0.75);\n    box-shadow: 0px 9px 15px 1px rgba(0,0,0,0.75);\n  }\n  `\n\n\n\nexport default connect( mapStateToProps, { fetchUserData })( class UserInfo extends Component {\n  \n\n  mapDispatchToProps = () => {\n    return {\n      fetchUserData\n    }\n  }\n\n  componentWillMount = () => {\n    this.props.fetchUserData();\n    \n  }\n  \n  handleClick = async (e) => {\n    window.open(`https://id.twitch.tv/oauth2/authorize?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=token&scope=channel:read:subscriptions`, '_self')\n    \n  } \n\n  \n\n\n  render(){\n    console.log(this.props.user.info.id !== undefined);\n    \n    return <Div>\n      <Image src={this.props.user.info.profile_image_url ? this.props.user.info.profile_image_url : logo} className=\"profile-image\" alt=\"profile\"/>\n    {this.props.user.info.id !== undefined ?  \n      (<Name>{this.props.user.info.display_name}</Name>) \n      : (<LoginButton onClick={ () => this.handleClick()}>Log In</LoginButton>)}\n    </Div>;\n  }\n})\n","\nimport { FETCH_USER } from '../actions/types'\n\n\nconst initialState = {\n  info: {},\n}\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case FETCH_USER:\n      return {\n        ...state,\n        info: payload\n      }\n\n  default:\n    return state\n  }\n}\n","\nimport { FETCH_SUBSCRIBERS } from '../actions/types'\n\nconst initialState = {\n   users: [[]]\n  \n}\n\nexport default (state = initialState, { type, payload }) => {\n  \n  switch (type) {\n    case FETCH_SUBSCRIBERS:\n      state.users.push(payload)\n      return {\n        users: state.users\n      }\n\n  default:\n    return state\n  }\n}\n","import { combineReducers } from 'redux';\nimport userInfoReducers from './userInfoReducer';\nimport subscriberInfoReducers from './subscriberInfoReducer'\n\nexport default combineReducers({\n  user: userInfoReducers,\n  subscribers: subscriberInfoReducers\n})","import { createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&  window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;","//\n// ─── SUBSCRIBERS ACTION ─────────────────────────────────────────────────────────\n//\n\n\nimport axios from 'axios'\nimport queryString from 'query-string'\nimport { FETCH_SUBSCRIBERS } from './types'\nimport store from '../store'\n\n// GET: SUBSCRIBER COUNTss\n// NEW TWITCH API (MARCH 2019)\nexport const fetchSubscribers = () => async dispatch => {\n  try {\n      const userID = store.getState().user.id\n      let subscribers = await axios.get(`https://ts-analytica-test.herokuapp.com/helix/subscriptions?broadcaster_id=${userID}`, {\n    headers: {\n        Authorization: `Bearer ${queryString.parse(document.location.hash).access_token}`\n      }\n    })\n\n    if (subscribers){\n      dispatch({\n        type: FETCH_SUBSCRIBERS,\n        payload: subscribers.data\n      })\n    }\n  } catch(error){\n    console.log(error)\n    \n  }\n}\n\nsetInterval(() => {\n  fetchSubscribers();\n}, 1000 * 60 * 5);","import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2';\nimport { connect } from 'react-redux'\nimport styled from 'styled-components/macro'\n\nimport { fetchSubscribers } from '../actions/subscriberActions'\nimport {COLORS} from '../colors'\n\nconst Chart = styled.div`\n  margin-top: 32px;\n  background-color: ${COLORS.LAVENDER};\n  /* background-color: #FFFFFF; */\n  border-radius: 12px;\n  width: 75%;\n  -webkit-box-shadow: 0px 10px 82px -7px rgba(0,0,0,0.75);\n  -moz-box-shadow: 0px 10px 82px -7px rgba(0,0,0,0.75);\n  box-shadow: 0px 10px 82px -7px rgba(0,0,0,0.75);\n\n`\n\nconst mapStateToProps = (state) => {\n  console.log(COLORS.BLUE);\n  \n  return {\n    user: state.user,\n    subscribers: state.subscribers\n  }\n}\n\nexport default connect( mapStateToProps, { fetchSubscribers })( class SubscriberChart extends Component {\n  data = {\n    labels: [],\n    datasets: [\n      {\n        fontColor: 'black',\n        label: 'Subscribers',\n        fill: true,\n        lineTension: 0.1,\n        backgroundColor: COLORS.BLUE ,\n        borderColor: COLORS.BLUE,\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: COLORS.BLUE,\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: []\n      }\n    ]\n  };\n  \n  options = {\n    scales: {\n      yAxes: [{\n        stacked: true,\n        gridLines: {\n          color: COLORS.DARK_BLUE,\n        },\n        ticks: {\n          fontColor: COLORS.DARK_BLUE,\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          fontColor: COLORS.DARK_BLUE,\n        },\n        gridLines: {\n          color: COLORS.DARK_BLUE,\n        }\n      }]\n    },\n    legend: {\n        display: true,\n        labels: {\n            fontColor: '#000'\n        }\n    },\n    title: {\n      display: 'true',\n      text: 'Subscribers Over Time',\n      fontColor: \"#000\"\n    }\n  }\n\n\n\n  \n\n  mapDispatchToProps = () => {\n    return {\n      fetchSubscribers\n    }\n  }\n\n  componentWillMount = () => {\n    this.props.fetchSubscribers();\n    setInterval(() => {\n      this.props.fetchSubscribers()\n    }, 10000)\n  }\n\n  componentWillReceiveProps = (nextProps) => {\n    this.data.datasets[0].data = nextProps.subscribers.users.slice(1).map( x => x.length)\n    if (this.data.datasets[0].data.length > 0){\n      this.data.labels.push(new Date().toUTCString().substring(18))\n\n    }\n  }\n  \n  render() {\n    \n    return (\n      <Chart>\n        <Line options={this.options} data={this.data} ref={(ref) => this.chart = ref }/>\n      </Chart>\n    )\n  }\n})\n\n","//\n// ─── MAIN APP ───────────────────────────────────────────────────────────────────\n//\n\n\nimport React, { Component } from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport styled from 'styled-components/macro'\n\nimport UserInfo from './UserInfo';\nimport SubscriberChart from './SubscriberChart'\nimport store from '../store';\n\nimport { COLORS } from '../colors'\n\nconst AppContainer = styled.div`\n  text-align: center;\n  background-color: ${COLORS.DARK_BLUE};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nexport default class App extends Component {\n  \n  componentDidMount = async () => {\n    \n  }\n  \n  render() {\n    return (\n      <Provider store={store}>\n        <AppContainer>\n            <UserInfo {... this.state} />\n            <SubscriberChart />\n        </AppContainer>\n      </Provider>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.d666ee78.png\";"],"sourceRoot":""}